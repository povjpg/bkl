from google.colab import drive
drive.mount('/content/drive')

import pandas as pd
from sklearn.svm import SVC
from sklearn.model_selection import train_test_split
import matplotlib.pyplot as plt
from sklearn.datasets import load_iris
iris = load_iris()
iris.feature_names
iris.target_names
df = pd.DataFrame(iris.data,columns=iris.feature_names)
df.head()

df['target'] = iris.target
df.head()

df[df.target==1].head()
df[df.target==2].head()
df['flower_name'] =df.target.apply(lambda x: iris.target_names[x])
df

df[45:55]
%matplotlib inline
df0 = df[df.target==0]
df1 = df[df.target==1]
df2 = df[df.target==2]
df2.head()
plt.xlabel('Sepal Length')
plt.ylabel('Sepal Width')
plt.scatter(df0['sepal length (cm)'], df0['sepal width (cm)'],color="green",marker='+')
plt.scatter(df1['sepal length (cm)'], df1['sepal width (cm)'],color="blue",marker='.')
plt.scatter(df2['sepal length (cm)'], df0['sepal width (cm)'],color="purple",marker='*')
plt.scatter(df1['sepal length (cm)'], df1['sepal width (cm)'],color="blue",marker='.')
plt.scatter(df2['sepal length (cm)'], df0['sepal width (cm)'],color="purple",marker='*')
plt.xlabel('Sepal Length')
plt.ylabel('Sepal Width')
plt.scatter(df0['sepal length (cm)'], df0['sepal width (cm)'],color="green",marker='+')
plt.scatter(df1['sepal length (cm)'], df1['sepal width (cm)'],color="blue",marker='.')
plt.xlabel('Petal Length')
plt.ylabel('Petal Width')
plt.scatter(df0['petal length (cm)'], df0['petal width (cm)'],color="green",marker='+')
plt.scatter(df1['petal length (cm)'], df1['petal width (cm)'],color="blue",marker='.')

X = df.drop(['target','flower_name'], axis='columns')
y = df.target
print("value of X", X)
print("value of y", y)
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.15)
print("value of X_train", X_train)
print("value of X_test", X_test)
print("value of y_train", y_train)
print("value of y_test", y_test)
print("lenght of X_train", len(X_train))
print("lenght of x_test", len(X_test))

import pandas as pd
from sklearn.svm import SVC
# Assuming X_train and X_test are pandas DataFrames
# Assigning feature names to the columns
feature_names = ['feature1', 'feature2', 'feature3', 'feature4']
X_train.columns = feature_names
X_test.columns = feature_names
# Now you can proceed with your SVC model fitting
model = SVC(kernel='linear', random_state=0)
model.fit(X_train, y_train)
# Check scores
print("Training Score:", model.score(X_train, y_train))
print("Test Score:", model.score(X_test, y_test))
# Predictions
print("Prediction for [5,3.5,1.5,.5]:", model.predict([[5, 3.5, 1.5, 0.5]]))
print("Prediction for [6,2.9,1,0.3]:", model.predict([[6, 2.9, 1, 0.3]]))
